// -*- c++ -*-
//==============================================================================
// IRIS - Long-range Interaction Solver Library
//
// Copyright (c) 2017-2018, the National Center for Supercomputing Applications
//
// Primary authors:
//     Valentin Pavlov <vpavlov@rila.bg>
//     Peicho Petkov <peicho@phys.uni-sofia.bg>
//     Stoyan Markov <markov@acad.bg>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//==============================================================================
#include "nlist.h"
#include "memory.h"
#include "logger.h"

using namespace ORG_NCSA_IRIS;

nlist::nlist(int in_nx, int in_ny, int in_nz, int in_num_charges)
    : m_nx(in_nx), m_ny(in_ny), m_nz(in_nz), m_ncharges(in_num_charges)
{
    memory::create_3d(m_head, in_nx, in_ny, in_nz, true, -1);
    memory::create_1d(m_list, in_num_charges);
}

nlist::~nlist()
{
    memory::destroy_3d(m_head);
    memory::destroy_1d(m_list);
}

void nlist::add_charge(int in_ix, int in_iy, int in_iz, int in_n)
{
    m_list[in_n] = m_head[in_ix][in_iy][in_iz];
    m_head[in_ix][in_iy][in_iz] = in_n;
}

void nlist::dump(logger *logger)
{
    for(int i=0;i<m_nx;i++) {
	for(int j=0;j<m_ny;j++) {
	    for(int k=0;k<m_nz;k++) {
		if(m_head[i][j][k] != -1) {
		    logger->info("HEAD[%d][%d][%d] = %d", 
				 i, j, k, m_head[i][j][k]);
		}
	    }
	}
    }
    for(int i=0;i<m_ncharges;i++) {
	logger->info("LIST[%d] = %d", i, m_list[i]);
    }
}
